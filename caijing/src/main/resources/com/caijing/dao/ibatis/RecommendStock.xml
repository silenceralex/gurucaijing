<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="RecommendStock">

	<typeAlias alias="RecommendStock"
		type="com.caijing.domain.RecommendStock" />

	<typeAlias alias="DiscountStock"
		type="com.caijing.domain.DiscountStock" />

	<select id="select" resultClass="RecommendStock">
		select * from recommendstock where recommendid=#recommendid#
	</select>

	<select id="getProblemData" resultClass="RecommendStock">
		select * from recommendstock where stockname is null
	</select>

	<select id="getRecommendStocks" parameterClass="java.util.Map"
		resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.reportid=r.rid order by rs.createdate desc limit
		#start#,#offset#
	</select>


	<select id="getDiscountStocks" resultClass="DiscountStock">
		select reportid,stockname,stockcode, saname,
		aname,createdate,grade FROM recommendstock where user is not
		null;
	</select>

	<select id="getRecommendStocksByStockcode"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.reportid=r.rid and rs.stockcode=#stockcode# order
		by rs.createdate desc
	</select>

	<select id="getRecommendStocksByStockname"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.reportid=r.rid and rs.stockname like #stockname#
		order by rs.createdate desc
	</select>

	<select id="getRecommendStocksBySaname"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.reportid=r.rid and rs.saname=#saname# order by
		rs.createdate desc limit #start#,#offset#
	</select>

	<select id="getUncompletedCounts" resultClass="java.lang.Integer"
		parameterClass="java.lang.String">
		select count(1) from recommendstock where saname=#value# and (
		<![CDATA[extractnum < 4 ]]>or ( extractnum=4 and objectprice!=0 ))
	</select>
	<select id="getUncompletedRecommendStocksBySaname"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.saname=#saname# and (
		<![CDATA[rs.extractnum < 4 ]]>or ( rs.extractnum=4 and rs.objectprice!=0 )) and
		r.rid=rs.reportid order by rs.createdate desc limit
		#start#,#offset#
	</select>

	<select id="getGoodCounts" resultClass="java.lang.Integer"
		parameterClass="java.lang.String">
		select count(1) from recommendstock where saname=#value# and (
		extractnum=5 or ( extractnum=4 and objectprice=0 ))
	</select>

	<select id="getGoodRecommendStocksBySaname"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.saname=#saname# and ( rs.extractnum=5 or (
		rs.extractnum=4 and rs.objectprice=0 )) and r.rid=rs.reportid
		order by rs.createdate desc limit #start#,#offset#
	</select>
	<select id="getRecommendStocksCountsbySaname"
		resultClass="java.lang.Integer">
		select count(1) from recommendstock where saname=#value#
	</select>

	<select id="getAllRecommendStocksCount"
		resultClass="java.lang.Integer">
		select count(1) from recommendstock
	</select>

	<select id="getAllRecommendCountBySaname"
		resultClass="java.lang.Integer" parameterClass="java.lang.String">
		select count(1) from recommendstock where saname=#value#
	</select>

	<select id="getRecommendStockCountsByAnalyzer"
		resultClass="java.lang.Integer">
		select count(1) from recommendstock where aname like #value#
	</select>

	<select id="getRecommendStocksByAnalyzer"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title, r.filepath as filepath from
		recommendstock as rs,report as r where rs.reportid=r.rid and
		rs.aname like #aname# order by rs.createdate desc limit
		#start#,#offset#
	</select>

	<select id="getRecommendStocksByAnalyzerASC"
		parameterClass="java.util.Map" resultClass="RecommendStock">
		select rs.*, r.title as title from recommendstock as rs,report
		as r where rs.reportid=r.rid and rs.aname like #aname# order by
		rs.createdate asc limit #start#,#offset#
	</select>

	<select id="getRecommendStockbyReportid"
		resultClass="RecommendStock">
		select * from recommendstock where reportid=#reportid#
	</select>

	<select id="getRecommendStocksGroupByCode"
		resultClass="RecommendStock">
		select * from recommendstock group by stockcode order by
		createdate
	</select>

	<insert id="insert">
		insert into recommendstock
		(recommendid,reportid,stockcode,saname,aname,createdate,grade,eps,objectprice,buyprice,user,lmodify,extractnum,stockname)
		values
		(#recommendid#,#reportid#,#stockcode#,#saname#,#aname#,#createdate#,#grade#,#eps#,#objectprice#,#buyprice#,#user#,now(),#extractnum#,#stockname#)
	</insert>

	<update id="updateAnalyzer" parameterClass="java.util.Map">
		update recommendstock
		<dynamic prepend="set">
			<isNotEmpty prepend="," property="aid">
				user = #aid#
			</isNotEmpty>
		</dynamic>
		where aname like #aname#
	</update>

	<update id="updateAnalyzerByReportid"
		parameterClass="java.util.Map">
		update recommendstock
		<dynamic prepend="set">
			<isNotEmpty prepend="," property="aid">
				user = #aid#
			</isNotEmpty>
		</dynamic>
		where reportid= #reportid#
	</update>

	<update id="update" parameterClass="RecommendStock">
		update recommendstock
		<dynamic prepend="set">
			<isNotEmpty prepend="," property="stockcode">
				stockcode = #stockcode#
			</isNotEmpty>
			<isNotEmpty prepend="," property="stockname">
				stockname = #stockname#
			</isNotEmpty>
			<isNotEmpty prepend="," property="objectprice">
				objectprice = #objectprice#
			</isNotEmpty>
			<isNotEmpty prepend="," property="buyprice">
				buyprice = #buyprice#
			</isNotEmpty>
			<isNotEmpty prepend="," property="user">
				user = #user#
			</isNotEmpty>
			<isNotEmpty prepend="," property="eps">
				eps = #eps#
			</isNotEmpty>
			<isNotEmpty prepend="," property="grade">
				grade = #grade#
			</isNotEmpty>
			<isNotEmpty prepend="," property="createdate">
				createdate = #createdate#
			</isNotEmpty>
			<isNotEmpty prepend="," property="aname">
				aname = #aname#
			</isNotEmpty>
			<isNotEmpty prepend="," property="lmodify">
				lmodify = #lmodify#
			</isNotEmpty>
		</dynamic>
		where recommendid=#recommendid#
	</update>

	<delete id="delete" parameterClass="RecommendStock">
		delete from recommendstock where recommendid=#recommendid#
	</delete>

	<select id="getFilePathByAid" resultClass="java.lang.String"
		parameterClass="java.util.Map">
		select r.filepath from recommendstock as rs,report as r where
		rs.user=#aid# and rs.stockcode=#stockcode# and rs.reportid=r.rid
		order by rs.createdate desc limit #length#
	</select>

	<select id="getRecommendStocksByReportids" resultClass="RecommendStock"
		parameterClass="java.util.Map">
		select rs.*, r.title as title,r.filepath as filepath from
		recommendstock as rs,report r where rs.reportid in
		<iterate property="list" conjunction="," close=")" open="(">
			#list[]#
		</iterate>
		and r.rid=rs.reportid
	</select>
	
	<select id="getResearchRecommendStocks" resultClass="RecommendStock"
		parameterClass="java.util.Map">
		select * from recommendstock where aname is not null and aname!='N/A' and grade is not null order by createdate desc limit #start#,#length#
	</select>
	
	<select id="getResearchRecommendStockCounts" resultClass="java.lang.Integer">
		select count(1) from recommendstock where aname is not null and aname!='N/A' and grade is not null
	</select>
</sqlMap>